<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>朱莉安的博客</title>
  
  <subtitle>比你牛逼的人比你更努力！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-19T15:41:33.557Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Julian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识异常</title>
    <link href="http://yoursite.com/2018/05/06/exception-konwledge/"/>
    <id>http://yoursite.com/2018/05/06/exception-konwledge/</id>
    <published>2018-05-06T08:28:24.000Z</published>
    <updated>2018-05-19T15:41:33.557Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a><div><span>简介</span></div></h3><p>用户在运行程序的期间，往往有可能会出现各种各样的错误导致程序执行失，结果是用户数据丢失。出现这种情况的时候当然不能置之不理，要么就应该告诉用户该错误，要么是用户数据得到保存，否则用户流量将呈现下降的趋势。为了正确的处理错误，Java提供了一种称为：<code>异常处理的错误捕获机制处理</code>。该机制的任务就是将控制权从错误产生的地方转移给能够处理这种情况的错误处理器。当然了，想要正确的处理异常情况的前提是必须要研究程序中哪些地方会出现问题和错误。</p><blockquote><p>异常的处理机制就好比生活中较为常见的灾难预防措施，如在公共场所安防灭火器、洒水器。</p></blockquote><h3 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a><div><span>异常分类</span></div></h3><p>在Java程序设计语言中，异常对象都是派生于<code>Throwable</code>类的一个实例，若内置的异常类不能满足需求，则用户还可以创建自己的异常类。</p><p class="customize-img"><img src="/assets/blogImg/throwable-hierarchy.png" alt="异常层次目录"></p><p>所有的异常都是由<code>Throwable</code>继承而来，在下一层又划分为两个分支：<code>Error</code>和<code>Exception</code>。</p><ul><li><code>Error</code>：描述了Java运行时系统的内部错误。在程序当中不应该抛出这种类型的错误，因为该错误除了通知用户之外，我们对它无能为力。</li><li><code>Exception</code>：<ul><li><code>IOException</code>：操作IO时出现的异常情况，如操作的文件不存在、试图在文件尾部后面读取数据。</li><li><code>RuntimeException</code>：由程序的错误编写而导致异常的出现，如错误的类型转换、数组角标越界。</li></ul></li></ul><h3 id="声明受查异常"><a href="#声明受查异常" class="headerlink" title="声明受查异常"></a><div><span>声明受查异常</span></div></h3><p>Java语言规范将派生于<code>Error</code>或<code>RuntimeException</code>的所有异常成为<code>非受查异常</code>，其他的所有异常称为<code>受查异常</code>。<br>为什么要声明异常呢？当你遇到无法处理的情况时是不是要告诉别人这件事我做不了你看着办，有点小尴尬的样子～至于为什么受查异常要声明而非受查异常不用声明呢？（声明了也不要紧，只是没必要）-见如下分析～</p><blockquote><p>处理文件时一般会先检查该文件是否存在，但是它是不是有可能在你检查完是否存在后就被删除了，所以受查异常更取决于环境而不只是代码。运行时异常（RuntimeException）出现的原因是由于代码编写的不规范而产生的，这完全是在我们的控制范围内，Java语言建议我们应该将更多的时间花费在修正程序中的错误上，而不是说明这些错误发生的可能性，所以非受查异常要么是我们无能为力的，要么是我们应该通过修正程序来避免发生。</p></blockquote><p>一个方法有可能要声明多个受查异常类型，那么就必须在方法的首部列出所有的异常类，每个异常类之间用逗号隔开。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnimation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawImage</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">throws</span> FileNotFoundException,EOFException</span>&#123;</span><br><span class="line"><span class="comment">//do anything</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="重点关注"><a href="#重点关注" class="headerlink" title="重点关注"></a><div><span>重点关注</span></div></h3><p><code>Throwable RuntimeException IOException 受查异常 非受查异常</code></p><p><a href="http:/ffffffffff" target="_blank" rel="noopener">源码下载</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;&lt;div&gt;&lt;span&gt;简介&lt;/span&gt;&lt;/div&gt;&lt;/h3&gt;&lt;p&gt;用户在运行程序的期间，往往有可能会出现各种各样的错误导致程序执行失，结果是用户数据丢失。出现
      
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
